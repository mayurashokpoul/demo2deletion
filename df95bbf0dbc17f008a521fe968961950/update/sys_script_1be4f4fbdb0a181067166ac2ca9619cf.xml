<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_inmis_im_itad_workorder</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_inmis_im_itad_workorder">workorder_statusINwo_submitted,failed^EQ<item display_value="wo_submitted,failed" endquery="false" field="workorder_status" goto="false" newquery="false" operator="IN" or="false" value="wo_submitted,failed"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>IngramMicro Create Job async BR</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions>x_inmis_im_itad.imitad_admin,x_inmis_im_itad.imitad_wo_create</role_conditions>
        <script><![CDATA[function compressArray(original) {
    var compressed = [];
    // make a copy of the input array
    var copy = original.slice(0);

    // first loop goes over every element
    for (var i = 0; i < original.length; i++) {
        var myCount = 0;
        // loop over every element in the copy and see if it's the same
        for (var w = 0; w < copy.length; w++) {
            if (original[i] == copy[w]) {
                // increase amount of times duplicate is found
                myCount++;
                // sets item to undefined
                delete copy[w];
            }
        }

        if (myCount > 0) {
            var a = new Object();
            a.value = original[i];
            a.count = myCount;
            compressed.push(a);
        }
    }
    return compressed;
}


function getLoggedinUserDetails() {
    var user = new GlideRecord('sys_user');
    if (user.get(gs.getUserID())) {
        return user;
    }
}



function jsonEncode(str) {
    str = new global.JSON().encode(str);
    return str.substring(1, str.length - 1);
}


(function executeRule(current, previous /*null when async*/ ) {
    try {
        gs.info("WorkOrder Number:" + current.number + ":after Business rule started.");

        var types = [];
        var count = [];
        var SerializedAssetLevelInformation = [];
        var equipmentdetails = [];
        var getCurrentDateTime = new GlideDateTime();
        var getCurrentDate = new GlideDate();
        var assetlist = current.u_glide_list_1.toString();
        var status = current.workorder_status;
        var array = assetlist.split(",");
        var currentUser = getLoggedinUserDetails();

        //Get token details
        var authenticationDetails = new IngramUtils().tokenValidation(current);

        //Prepare serialized asset level information
        for (var assetInfo = 0; assetInfo < array.length; assetInfo++) {
            var record = new GlideRecord('alm_asset');
            var isAssetInWarranty = false;
            if (record.get(array[assetInfo])) {
                if (record.getValue('warranty_expiration') != null || record.getValue('warranty_expiration') != '') {
                    if (getCurrentDate <= record.getValue('warranty_expiration')) {
                        isAssetInWarranty = true;
                    }
                }

                var assetInformation = {
                    "vAssetSourceKey": array[assetInfo].toString(),
                    "SerialNumber": record.getDisplayValue('serial_number').toString(),
                    "AssetTag": record.getDisplayValue('asset_tag').toString(),
                    "Class": 24,
                    "Category": 97,
                    "Manufacturer": record.model.manufacturer.name.toString(),
                    "Model": record.model.model_number.toString(),
                    "Description": record.getDisplayName(),
                    "Color": 0,
                    "IsAssetInWarranty": isAssetInWarranty,
                    "WarrantyEndDate": record.getDisplayValue('warranty_expiration'),
                    "MSRP": "00.0",
                };
                SerializedAssetLevelInformation.push(assetInformation);
                //  gs.info('WorkOrder SerializedAsset:' + JSON.stringify(assetInformation));

                //Calculate quantity of assets against model category        
                types.push(record.getValue('model_category'));
                types = types.sort();
            }
        }
        var newArray = compressArray(types);
        // gs.info('Workoder newArray: ' + JSON.stringify(newArray));
        for (var i = 0; i < newArray.length; i++) {
            var equipid = "";
            var asset = {};
            var grupdates11 = new GlideRecord('x_inmis_im_itad_im_mapping_model_equipment');
            grupdates11.addQuery('mapping_model_categories', newArray[i].value);
            grupdates11.query();
            if (grupdates11.next()) {
                equipid = grupdates11.mapping_equipment_type.equipmenttypeid;
                asset = {
                    "EquipmentType": parseInt(equipid.toString()),
                    "EstimatedQty": newArray[i].count,
                    "PalletCount": 0,
                    "PalletWeight": 0
                };
            }

            equipmentdetails.push(asset);
            //  gs.info('WorkOrder equipmentdetailsjson:' + JSON.stringify(equipmentdetails));

        }


        var misc = {
            "EquipmentType": 1,
            "EstimatedQty": 0,
            "PalletCount": current.misc_items_enter_pallet_count_manually.toString() ? current.misc_items_enter_pallet_count_manually.toString() : 0,
            "PalletWeight": current.misc_items_enter_weight_manually.toString() ? current.misc_items_enter_weight_manually.toString() : 0
        };
        equipmentdetails.push(misc);
        //  gs.info('WorkOrder FInalequipmentdetailsjson:' + JSON.stringify(equipmentdetails));


        //API call started to create job
        gs.info("WorkOrder Number:" + current.number + ":API call started.");
        var r = new sn_ws.RESTMessageV2('x_inmis_im_itad.IngramMicro Create Job', 'post');
        r.setStringParameterNoEscape('PONumber', current.u_ponumber);
        r.setStringParameterNoEscape('SourceID', authenticationDetails.sourceid);
        r.setStringParameterNoEscape('LatestDate', current.latest_date);
        r.setStringParameterNoEscape('LocationToPalletize', current.location_palletize);
        r.setStringParameterNoEscape('LocationID', current.u_location.itad_locationid);
        r.setStringParameterNoEscape('Token', authenticationDetails.Token);
        r.setStringParameterNoEscape('TimeOfDay', current.time_of_day == '' ? 0 : current.time_of_day);
        r.setStringParameterNoEscape('FeedExecutionDate', getCurrentDateTime);
        r.setStringParameterNoEscape('WorkOrderID', current.number);
        r.setStringParameterNoEscape('WorkOrderType', current.u_wotype);
        r.setStringParameterNoEscape('EarliestDate', current.earliest_date);
        r.setStringParameterNoEscape('EquipmentLocation', current.equipment_location);
        r.setStringParameterNoEscape('DeliverySentDate', current.delivery_sent_date);
        r.setStringParameterNoEscape('EstimatedArrivalDate', current.estimated_arrival_date);
        r.setStringParameterNoEscape('TrackingNumber', current.tracking_number);
        r.setStringParameterNoEscape('EquipmentNotes', jsonEncode(current.getValue('u_equipment_notes')) + " " + jsonEncode(current.getValue('miscellaneousbox')));
        r.setStringParameterNoEscape('SourceOfRequest', 'ServiceNow');
        r.setStringParameterNoEscape('vWOSourceKey', current.sys_id);
        r.setStringParameterNoEscape('SerializedAssetLevelInformation', JSON.stringify(SerializedAssetLevelInformation));
        r.setStringParameterNoEscape('Equipmentdetails', JSON.stringify(equipmentdetails));
        r.setStringParameterNoEscape('vPickupInstruction', current.pickup_instructions);
        r.setStringParameterNoEscape('CreateJobbaseUrl', gs.getProperty('x_inmis_im_itad.CreateJob'));
        r.setStringParameterNoEscape('SchedulingNotes', jsonEncode(current.getValue('scheduling_notes') + ''));
        r.setStringParameterNoEscape('DatesNotAvailable', jsonEncode(current.getValue('dates_not_available') + ''));
        r.setStringParameterNoEscape('Name', currentUser.getValue('name'));
        r.setStringParameterNoEscape('Email', currentUser.getValue('email'));
        r.setStringParameterNoEscape('Phone', currentUser.getValue('phone'));
        r.setEccParameter('skip_sensor', true);

        var response = r.execute();
        var responseBody = response.getBody();
        var httpStatus = response.getStatusCode();
        var RequestBody = JSON.parse(r.getRequestBody());
        RequestBody.Token = "XXXXXXXXXXX";
        gs.info('WorkOrder Request Body: ' + JSON.stringify(RequestBody));
        gs.info("WorkOrder Response Body: " + responseBody);

        var readResponse = JSON.parse(responseBody);

        if (response.haveError()) {
            current.workorder_status = 'failed';
            current.failed_reason = readResponse.ErrorMessage;
            gs.info("Work Order Error Message" + response.getErrorMessage());
        } else {
            if (readResponse.Responsecode == "0" || readResponse.ErrorMessage == "") {
                // To create/update IMITAD Hardware  records once we got response from blue IQ
                for (var x = 0; x < array.length; x++) {
                    var IMITADHardware = new GlideRecord('x_inmis_im_itad_imitad_hardware');
                    IMITADHardware.addQuery('hardware_assets', array[x]);
                    IMITADHardware.query();
                    if (IMITADHardware.next()) {
                        IMITADHardware.order_type = (current.u_wotype == '5123' ? 'Pickup' : 'Delivery');
                        IMITADHardware.workorder = current.number;
                        IMITADHardware.workorder_status = readResponse.JobStatus;
                        IMITADHardware.update();
                    } else {
                        var IMITADHardware1 = new GlideRecord('x_inmis_im_itad_imitad_hardware');
                        IMITADHardware1.initialize();
                        IMITADHardware1.order_type = (current.u_wotype == '5123' ? 'Pickup' : 'Delivery');
                        IMITADHardware1.hardware_assets = array[x];
                        IMITADHardware1.workorder = current.number;
                        IMITADHardware1.workorder_status = readResponse.JobStatus;
                        IMITADHardware1.insert();
                    }
                }


                current.im_jobid = readResponse.JobID;
                if (readResponse.JobStatus == 'Requested') {
                    current.workorder_status = 'requested';
                } else if (readResponse.JobStatus == 'Scheduled') {
                    current.workorder_status = 'scheduled';
                }

                //to change status of assets on submit
                for (var k = 0; k < array.length; k++) {
                    //    gs.info("WorkOrder asset sysid is: " + array[k] + "-" + k);
                    var grupdate = new GlideRecord('alm_asset');
                    grupdate.addQuery('sys_id', array[k]);
                    grupdate.query();
                    if (grupdate.next()) {
                        grupdate.setValue('install_status', 9);
                        grupdate.setValue('substatus', 'pending_disposal');
                        grupdate.update();
                    }

                }


                gs.addInfoMessage('Workorder ' + current.number + ' has been submitted successfully in ServiceNow. Please note Job ' + current.im_jobid + ' for further communication.');

            } else {
                gs.info(readResponse.ErrorMessage);
                current.workorder_status = 'failed';
                current.failed_reason = readResponse.ErrorMessage;
                gs.info("Work Order Error Message" + response.getErrorMessage());
            }
        }

        gs.info('WorkOrder :' + current.number + ':Business rule completed.');




        // create Job contact list
        var JobContactInformation = [];
        var Jobcontactlist = current.u_glide_list_2.toString();
        var JobContactArray = Jobcontactlist.split(",");
        //Prepare serialized asset level information
        for (var JobContactInfo = 0; JobContactInfo < JobContactArray.length; JobContactInfo++) {
            var record1 = new GlideRecord('sys_user');
            if (record1.get(JobContactArray[JobContactInfo])) {
                var contactInformation = {
                    "JobContactName": record1.getDisplayValue('first_name').toString() + "" + record1.getDisplayValue('last_name').toString(),
                    "Email": record1.getDisplayValue('email').toString(),
                    "EmployeePhone": record1.getDisplayValue('phone').toString(),
                    "EmployeeMobile": record1.getDisplayValue('mobile_phone').toString()

                };
                JobContactInformation.push(contactInformation);
            }
        }
        // gs.info('WorkOrder jobcontactInformation!!!!:' + JSON.stringify(JobContactInformation));


        if (current.im_jobid != "") {
            gs.info('WorkOrder create Job Contact started.');
            var r1 = new sn_ws.RESTMessageV2('x_inmis_im_itad.Create Job Contact', 'post');
            r1.setStringParameterNoEscape('Token', authenticationDetails.Token);
            r1.setStringParameterNoEscape('SourceID', authenticationDetails.sourceid);
            r1.setStringParameterNoEscape('JobID', current.im_jobid);
            r1.setStringParameterNoEscape('JobContactInformation', JSON.stringify(JobContactInformation));
            r1.setStringParameterNoEscape('CreateJobbaseUrl', gs.getProperty('x_inmis_im_itad.CreateJob').replace('NewJobCreation', 'CreateJobContact'));

            var response2 = r1.execute();

            var responseBody2 = response2.getBody();
            var httpStatus2 = response2.getStatusCode();
            var RequestBody2 = JSON.parse(r1.getRequestBody());
            RequestBody2.JobInformation.Token = "XXXXXXXXXXX";
            RequestBody2.JobContactInformation = "XXXXXXXXXXX";
            gs.info('WorkOrder Job Contact Request Body:' + JSON.stringify(RequestBody2));
            gs.info("WorkOrder Job Contact responseBody2 : " + responseBody2);
            gs.info('WorkOrder create Jobcontact request created successfully.');
        }

    } catch (ex) {
        var msg = ex.message;
        current.workorder_status = 'failed';
        current.failed_reason = msg;
        gs.info('WorkOrder BR [IngramMicro Create Job] Error occured: ' + ex);
    }

    current.update();

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>Munimohan.Bathala@ness.com</sys_created_by>
        <sys_created_on>2020-07-23 12:43:52</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>1be4f4fbdb0a181067166ac2ca9619cf</sys_id>
        <sys_mod_count>85</sys_mod_count>
        <sys_name>IngramMicro Create Job async BR</sys_name>
        <sys_overrides/>
        <sys_package display_value="Ingram Micro IT Asset Disposition" source="x_inmis_im_itad">df95bbf0dbc17f008a521fe968961950</sys_package>
        <sys_policy/>
        <sys_scope display_value="Ingram Micro IT Asset Disposition">df95bbf0dbc17f008a521fe968961950</sys_scope>
        <sys_update_name>sys_script_1be4f4fbdb0a181067166ac2ca9619cf</sys_update_name>
        <sys_updated_by>Ruthvic.voladri@ness.com</sys_updated_by>
        <sys_updated_on>2021-02-03 08:56:07</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=1be4f4fbdb0a181067166ac2ca9619cf"/>
</record_update>
